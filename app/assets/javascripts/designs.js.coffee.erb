# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

$ ->

    model = null
    $surrounding_div = $('.model') # 3d canvas

    # Camera setup.
    VIEW_ANGLE = 45
    ASPECT_RATIO = 330 / 720
    NEAR_DIST = 0.1
    FAR_DIST = 10000
    CAMERA_DIST = 500
    CAMERA_HEIGHT = 0

    # WebGL box's size on page.
    col_width = $surrounding_div.parent().width()
    MODEL_VIEW_WIDTH = col_width
    MODEL_VIEW_HEIGHT = MODEL_VIEW_WIDTH / ASPECT_RATIO

    # Event data setup.
    mouse_down = false
    mouse_x = 0
    mouse_y = 0
    mouse_in = false

    renderer = new THREE.WebGLRenderer( {antialias: true} )
    camera = new THREE.PerspectiveCamera( VIEW_ANGLE, ASPECT_RATIO, NEAR_DIST, FAR_DIST )
    scene = new THREE.Scene()

    scene.add(camera)
    camera.position.x = 0
    camera.position.y = CAMERA_HEIGHT
    camera.position.z = CAMERA_DIST
    renderer.setSize(MODEL_VIEW_WIDTH, MODEL_VIEW_HEIGHT)
    $surrounding_div.append(renderer.domElement)
    $canvas = $('.model canvas')
    scene.add(new THREE.AmbientLight(0x404040))

    pointLight = new THREE.PointLight(0xffffff, 1, 0)
    pointLight.position.set(200, 500, 500)
    scene.add(pointLight)

    model_loader = new THREE.JSONLoader()
    model_loader.loadAjaxJSON(
        model_loader,
        "<%= asset_path 'dpArtemix_P11v1.js' %>",
        (geometry, materials) ->
            for material in materials
                material.ambient.setHex(0xffffff)
                material.color.setHex(0xffffff)
            mesh = new THREE.Mesh(geometry, new THREE.MeshFaceMaterial(materials))
            mesh.scale.set(2, 2, 2)
            # the model is oriented with the y-axis pointing toward the top of the screen
            mesh.position.set(0, -140, 0)
            mesh.rotation.y = Math.PI/2.2
            scene.add(mesh)
            console.log(mesh)
            model = mesh
            window.mesh = mesh
            window.add_leg('left', '/designingforbodies_artemixoutput_final.jpg')
            window.add_leg('right', '/designingforbodies_artemixoutput_final.jpg')
            window.setTimeout( () ->
                window.paint_model()
                window.render()
                $('.loading').hide()
            , 5000)
        ,"/",
        (progress, result) ->
            # console.log('progress: ', progress)
            # console.log('result', result)
    )

    callbacks = {
        mousein: ->
            mouse_in = true

        mouseout: ->
            mouse_in = false

        mousedown: ->
            mouse_down = true

        mouseup: ->
            mouse_down = false
            mouse_x = 0
            mouse_y = 0

        scroll: (event) ->
            if mouse_in
                event.preventDefault()

                CAMERA_DIST -= event.originalEvent.deltaY * 1.5
                check_camera_dist()

                camera.position.z = CAMERA_DIST
                camera.lookAt(new THREE.Vector3(0,CAMERA_HEIGHT,0))

                window.mesh.rotation.y -= event.originalEvent.deltaX / 100

                window.render()

        get_diffs: (event) ->
            diffs = [0, 0]

            if mouse_down
                mouse_x = event.pageX if mouse_x == 0
                mouse_y = event.pageY if mouse_y == 0

                diffs[0] = mouse_x - event.pageX
                diffs[1] = mouse_y - event.pageY

            mouse_x = event.pageX
            mouse_y = event.pageY

            diffs

        mousemove: (event) ->
            diffs = callbacks.get_diffs(event)

            # rotate model
            window.mesh.rotation.y -= diffs[0] / 100

            # move camera in or out
            CAMERA_HEIGHT -= diffs[1]
            camera.position.y = CAMERA_HEIGHT

            camera.lookAt(new THREE.Vector3(0,CAMERA_HEIGHT,0))

            window.render()
    }

    $surrounding_div.mousedown(callbacks.mousedown)
    $surrounding_div.mousemove(callbacks.mousemove)
    $surrounding_div.mouseup(callbacks.mouseup)
    $canvas.mouseenter(callbacks.mousein)
    $canvas.mouseleave(callbacks.mouseout)
    $(window).bind('mousewheel', callbacks.scroll)

    camera.lookAt(new THREE.Vector3(0,CAMERA_HEIGHT,0))

    check_camera_dist = ->
        min_distance = 100
        CAMERA_DIST = min_distance if CAMERA_DIST < min_distance
        max_distance = 900
        CAMERA_DIST = max_distance if CAMERA_DIST > max_distance

    render_loop = ->
        requestAnimationFrame(render_loop)
        window.render()

    window.render = ->
        renderer.render(scene, camera)

    window.paint_model = ->
        left_leg_image = get_left_leg_image()
        left_leg_texture = new THREE.Texture(left_leg_image)
        right_leg_image = get_right_leg_image()
        right_leg_texture = new THREE.Texture(right_leg_image)
        left_leg_texture.needsUpdate = true
        right_leg_texture.needsUpdate = true
        left_leg_material = left_leg_material || get_left_leg_material()
        right_leg_material = right_leg_material || get_right_leg_material()
        left_leg_material.map = left_leg_texture
        right_leg_material.map = right_leg_texture
        window.render()

    get_left_leg_material = ->
        to_return = get_material_with_name 'left_leg'
        to_return = to_return || model.material.materials[1]

    get_right_leg_material = ->
        to_return = get_material_with_name 'right_leg'
        to_return = to_return || model.material.materials[0]

    get_material_with_name = (name) ->
        for material in mesh.material.materials
            if material.name == name
                return material

    get_left_leg_image = ->
        $('#right_model_image')[0]

    get_right_leg_image = ->
        $('#left_model_image')[0]
