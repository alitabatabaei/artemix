# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

$ ->

    model = null

    MODEL_VIEW_WIDTH = 300
    MODEL_VIEW_HEIGHT = 660
    VIEW_ANGLE = 45
    ASPECT_RATIO = MODEL_VIEW_WIDTH / MODEL_VIEW_HEIGHT
    NEAR_DIST = 0.1
    FAR_DIST = 1000
    RADIUS = 300
    LOCATION_ANGLE = 0

    mouse_down = false
    mouse_x = 0
    mouse_y = 0

    $canvas = $('.model') # 3d canvas
    renderer = new THREE.WebGLRenderer()
    camera = new THREE.PerspectiveCamera( VIEW_ANGLE, ASPECT_RATIO, NEAR_DIST, FAR_DIST )
    scene = new THREE.Scene()

    scene.add(camera)
    camera.position.x = RADIUS * Math.sin(LOCATION_ANGLE)
    camera.position.y = 0
    camera.position.z = RADIUS * Math.cos(LOCATION_ANGLE)
    renderer.setSize(MODEL_VIEW_WIDTH, MODEL_VIEW_HEIGHT)
    $canvas.append(renderer.domElement)
    scene.add(new THREE.AmbientLight(0xffffff))

    loading_manager = new THREE.LoadingManager()
    loading_manager.onProgress = (item, loaded, total) ->
        console.log(item, loaded, total)

    texture = THREE.ImageUtils.loadTexture("<%= asset_path 'rocket.jpg' %>")

    model_loader = new THREE.JSONLoader(loading_manager)
    model_loader.load( "<%= asset_path 'leggings.js' %>", (geometry, materials) ->
        for material in materials
            material.ambient.setHex(0xffffff)
        mesh = new THREE.Mesh(geometry, new THREE.MeshFaceMaterial(materials))
        mesh.scale.set(10, 10, 10)
        mesh.position.set(0, 0, 0)
        scene.add(mesh)
        console.log(mesh)
        model = mesh
        render_loop()
    )

    callbacks = {
        mousedown: (event) ->
            mouse_down = true

        mouseup: ->
            mouse_down = false
            mouse_x = 0
            mouse_y = 0

        get_diffs: (event) ->
            diffs = [0, 0]

            if mouse_down
                mouse_x = event.pageX if mouse_x == 0
                mouse_y = event.pageY if mouse_y == 0

                diffs[0] = mouse_x - event.pageX
                diffs[1] = mouse_y - event.pageY

            mouse_x = event.pageX
            mouse_y = event.pageY

            diffs

        mousemove: (event) ->
            diffs = callbacks.get_diffs(event)

            # ROTATE around axis
            LOCATION_ANGLE += diffs[0] / 100
            camera.position.x = RADIUS * Math.sin(LOCATION_ANGLE)
            camera.position.z = RADIUS * Math.cos(LOCATION_ANGLE)

            # ZOOM in or out
            RADIUS -= diffs[1]

            camera.lookAt(new THREE.Vector3(0,0,0))
    }

    $canvas.mousedown(callbacks.mousedown)
    $canvas.mousemove(callbacks.mousemove)
    $canvas.mouseup(callbacks.mouseup)

    camera.lookAt(new THREE.Vector3(0,0,0))

    render_loop = ->
        requestAnimationFrame(render_loop)
        paint_model()
        renderer.render(scene, camera)

    paint_model = ->
        left_leg_image = get_left_leg_image()
        left_leg_texture = new THREE.Texture(left_leg_image)
        right_leg_image = get_right_leg_image()
        right_leg_texture = new THREE.Texture(right_leg_image)
        left_leg_texture.needsUpdate = true
        right_leg_texture.needsUpdate = true
        model.material.materials[0].map = left_leg_texture
        model.material.materials[2].map = right_leg_texture

    get_left_leg_image = ->
        $('#left_leg')[0]

    get_right_leg_image = ->
        $('#right_leg')[0]
