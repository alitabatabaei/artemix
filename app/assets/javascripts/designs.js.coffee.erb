# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

$ ->

    model = null

    MODEL_VIEW_WIDTH = 330
    MODEL_VIEW_HEIGHT = 720
    VIEW_ANGLE = 45
    ASPECT_RATIO = MODEL_VIEW_WIDTH / MODEL_VIEW_HEIGHT
    NEAR_DIST = 0.1
    FAR_DIST = 1000
    CAMERA_DIST = 500
    CAMERA_HEIGHT = 100
    MODEL_ANGLE = Math.PI/2;

    mouse_down = false
    mouse_x = 0
    mouse_y = 0

    $canvas = $('.model') # 3d canvas
    renderer = new THREE.WebGLRenderer()
    camera = new THREE.PerspectiveCamera( VIEW_ANGLE, ASPECT_RATIO, NEAR_DIST, FAR_DIST )
    scene = new THREE.Scene()

    scene.add(camera)
    camera.position.x = 0
    camera.position.y = CAMERA_HEIGHT
    camera.position.z = CAMERA_DIST
    renderer.setSize(MODEL_VIEW_WIDTH, MODEL_VIEW_HEIGHT)
    $canvas.append(renderer.domElement)
    scene.add(new THREE.AmbientLight(0x404040))

    pointLight = new THREE.PointLight(0xffffff, 1, 0)
    pointLight.position.set(200, 500, 500)
    scene.add(pointLight)

    loading_manager = new THREE.LoadingManager()
    loading_manager.onProgress = (item, loaded, total) ->
        console.log(item, loaded, total)

    model_loader = new THREE.JSONLoader(loading_manager)
    model_loader.load( "<%= asset_path 'widelegLonghair5.js' %>", (geometry, materials) ->
        for material in materials
            material.ambient.setHex(0xffffff)
            material.color.setHex(0xffffff)
        mesh = new THREE.Mesh(geometry, new THREE.MeshFaceMaterial(materials))
        mesh.scale.set(2.3, 2.3, 2.3)
        # the model is oriented with the y-axis pointing toward the top of the screen
        mesh.position.set(0, -140, 0)
        mesh.rotation.y = MODEL_ANGLE;
        scene.add(mesh)
        console.log(mesh)
        model = mesh
        window.mesh = mesh
        window.paint_model()
        window.render()
    )

    callbacks = {
        mousedown: (event) ->
            mouse_down = true

        mouseup: ->
            mouse_down = false
            mouse_x = 0
            mouse_y = 0

        get_diffs: (event) ->
            diffs = [0, 0]

            if mouse_down
                mouse_x = event.pageX if mouse_x == 0
                mouse_y = event.pageY if mouse_y == 0

                diffs[0] = mouse_x - event.pageX
                diffs[1] = mouse_y - event.pageY

            mouse_x = event.pageX
            mouse_y = event.pageY

            diffs

        mousemove: (event) ->
            diffs = callbacks.get_diffs(event)

            # rotate model
            MODEL_ANGLE -= diffs[0] / 100
            mesh.rotation.y = MODEL_ANGLE;

            # move camera in or out
            CAMERA_DIST -= diffs[1]
            camera.position.z = CAMERA_DIST;

            camera.lookAt(new THREE.Vector3(0,0,0))

            window.render()
    }

    $canvas.mousedown(callbacks.mousedown)
    $canvas.mousemove(callbacks.mousemove)
    $canvas.mouseup(callbacks.mouseup)

    camera.lookAt(new THREE.Vector3(0,0,0))

    render_loop = ->
        requestAnimationFrame(render_loop)
        window.render()

    window.render = ->
        renderer.render(scene, camera)

    window.paint_model = ->
        left_leg_image = get_left_leg_image()
        left_leg_texture = new THREE.Texture(left_leg_image)
        right_leg_image = get_right_leg_image()
        right_leg_texture = new THREE.Texture(right_leg_image)
        left_leg_texture.needsUpdate = true
        right_leg_texture.needsUpdate = true
        left_leg_material = left_leg_material || get_left_leg_material()
        right_leg_material = right_leg_material || get_right_leg_material()
        console.log(left_leg_material)
        console.log(right_leg_material)
        left_leg_material.map = left_leg_texture
        right_leg_material.map = right_leg_texture
        window.render()

    get_left_leg_material = ->
        to_return = get_material_with_name 'left_leg'
        to_return = to_return || model.material.materials[1]

    get_right_leg_material = ->
        to_return = get_material_with_name 'right_leg'
        to_return = to_return || model.material.materials[0]

    get_material_with_name = (name) ->
        for material in mesh.material.materials
            if material.name == name
                return material

    get_left_leg_image = ->
        $('#left_leg')[0]

    get_right_leg_image = ->
        $('#right_leg')[0]
